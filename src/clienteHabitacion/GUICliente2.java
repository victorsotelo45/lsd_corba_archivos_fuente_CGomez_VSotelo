/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clienteHabitacion;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import org.omg.CORBA.ORB;
import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextPackage.CannotProceed;
import org.omg.CosNaming.NamingContextPackage.NotFound;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;
import org.omg.PortableServer.POAManagerPackage.AdapterInactive;
import servidorAlertas.sop_corba.AsintomaticoCllbckInt;
import servidorAlertas.sop_corba.AsintomaticoCllbckIntPOATie;
import servidorAlertas.sop_corba.GestionAsintomaticosIntOperations;
import servidorAlertas.sop_corba.ClsAsintomaticoDTO;
import servidorAlertas.sop_corba.GestionAsintomaticosIntHelper;

/**
 *
 * @author VICTOR MANUEL
 */
public class GUICliente2 extends javax.swing.JFrame implements Runnable{

    static GestionAsintomaticosIntOperations ref;
    ClsAsintomaticoDTO paciente;
    CardLayout cardLayout;
    private static boolean estaRegistradoNS;
    public static ORB orb;
    boolean stop;
    
    /**
     * Creates new form GUICliente
     */    
    public GUICliente2() {
        initComponents();
        cardLayout = (CardLayout) (jPanelCardLayout.getLayout());
        if (!estaRegistradoNS)
            cardLayout.show(jPanelCardLayout, "cardRegistroOrb");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelCardLayout = new javax.swing.JPanel();
        jPanelRegistrar = new javax.swing.JPanel();
        jLabelTipoId = new javax.swing.JLabel();
        jLabelId = new javax.swing.JLabel();
        jLabelNombre = new javax.swing.JLabel();
        jButtonSalir = new javax.swing.JButton();
        jRadioButtonCC = new javax.swing.JRadioButton();
        jRadioButtonTI = new javax.swing.JRadioButton();
        jRadioButtonPP = new javax.swing.JRadioButton();
        jLabelApellido = new javax.swing.JLabel();
        jLabelDireccion = new javax.swing.JLabel();
        jTextFieldNombres = new javax.swing.JTextField();
        jTextFieldApellidos = new javax.swing.JTextField();
        jTextFieldDireccion = new javax.swing.JTextField();
        jTextFieldId = new javax.swing.JTextField();
        jButtonRegistrarPaciente = new javax.swing.JButton();
        jPanelIndicadores = new javax.swing.JPanel();
        jButtonEnviar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPaneArea = new javax.swing.JTextPane();
        jButtonDetener = new javax.swing.JButton();
        jPanelRegsitroOrb = new javax.swing.JPanel();
        jLabelIp = new javax.swing.JLabel();
        jLabelPuerto = new javax.swing.JLabel();
        jTextFieldIp = new javax.swing.JTextField();
        jTextFieldPuerto = new javax.swing.JTextField();
        jButtonRegistrar = new javax.swing.JButton();
        jButtonSalirRegsitrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelCardLayout.setLayout(new java.awt.CardLayout());

        jPanelRegistrar.setName(""); // NOI18N
        jPanelRegistrar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelTipoId.setText("Tipo de identificacion");
        jPanelRegistrar.add(jLabelTipoId, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        jLabelId.setText("Numero de identificacion");
        jPanelRegistrar.add(jLabelId, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 80, -1, -1));

        jLabelNombre.setText("Nombre");
        jPanelRegistrar.add(jLabelNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 118, -1, -1));

        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });
        jPanelRegistrar.add(jButtonSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 260, -1, -1));

        jRadioButtonCC.setText("CC");
        jPanelRegistrar.add(jRadioButtonCC, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, -1, -1));

        jRadioButtonTI.setText("TI");
        jPanelRegistrar.add(jRadioButtonTI, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, -1, -1));

        jRadioButtonPP.setText("PP");
        jPanelRegistrar.add(jRadioButtonPP, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, -1, -1));

        jLabelApellido.setText("Apellido");
        jPanelRegistrar.add(jLabelApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 156, -1, -1));

        jLabelDireccion.setText("Direccion de domicilio");
        jPanelRegistrar.add(jLabelDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 194, -1, -1));

        jTextFieldNombres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldNombresKeyTyped(evt);
            }
        });
        jPanelRegistrar.add(jTextFieldNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 120, 198, -1));

        jTextFieldApellidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldApellidosKeyTyped(evt);
            }
        });
        jPanelRegistrar.add(jTextFieldApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 150, 198, -1));

        jTextFieldDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldDireccionKeyTyped(evt);
            }
        });
        jPanelRegistrar.add(jTextFieldDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 198, -1));

        jTextFieldId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldIdKeyTyped(evt);
            }
        });
        jPanelRegistrar.add(jTextFieldId, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 198, -1));

        jButtonRegistrarPaciente.setText("Registrar");
        jButtonRegistrarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistrarPacienteActionPerformed(evt);
            }
        });
        jPanelRegistrar.add(jButtonRegistrarPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, -1, -1));

        jPanelCardLayout.add(jPanelRegistrar, "cardRegistrar");

        jButtonEnviar.setText("Iniciar Indicadores");
        jButtonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnviarActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jTextPaneArea);

        jButtonDetener.setText("Detener indicadores");
        jButtonDetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetenerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelIndicadoresLayout = new javax.swing.GroupLayout(jPanelIndicadores);
        jPanelIndicadores.setLayout(jPanelIndicadoresLayout);
        jPanelIndicadoresLayout.setHorizontalGroup(
            jPanelIndicadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIndicadoresLayout.createSequentialGroup()
                .addGroup(jPanelIndicadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelIndicadoresLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jButtonEnviar)
                        .addGap(47, 47, 47)
                        .addComponent(jButtonDetener))
                    .addGroup(jPanelIndicadoresLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanelIndicadoresLayout.setVerticalGroup(
            jPanelIndicadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIndicadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelIndicadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDetener)
                    .addComponent(jButtonEnviar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelCardLayout.add(jPanelIndicadores, "cardIndicadores");

        jLabelIp.setText("Ingrese la direccion Ip del orbd");

        jLabelPuerto.setText("Ingrese el puerto de escucha del orbd");

        jButtonRegistrar.setText("Registrar");
        jButtonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistrarActionPerformed(evt);
            }
        });

        jButtonSalirRegsitrar.setText("Salir");

        javax.swing.GroupLayout jPanelRegsitroOrbLayout = new javax.swing.GroupLayout(jPanelRegsitroOrb);
        jPanelRegsitroOrb.setLayout(jPanelRegsitroOrbLayout);
        jPanelRegsitroOrbLayout.setHorizontalGroup(
            jPanelRegsitroOrbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRegsitroOrbLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanelRegsitroOrbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelIp)
                    .addComponent(jLabelPuerto))
                .addGap(30, 30, 30)
                .addGroup(jPanelRegsitroOrbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldIp)
                    .addComponent(jTextFieldPuerto))
                .addContainerGap())
            .addGroup(jPanelRegsitroOrbLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jButtonRegistrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                .addComponent(jButtonSalirRegsitrar)
                .addGap(55, 55, 55))
        );
        jPanelRegsitroOrbLayout.setVerticalGroup(
            jPanelRegsitroOrbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRegsitroOrbLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(jPanelRegsitroOrbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelIp)
                    .addComponent(jTextFieldIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanelRegsitroOrbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPuerto)
                    .addComponent(jTextFieldPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(jPanelRegsitroOrbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRegistrar)
                    .addComponent(jButtonSalirRegsitrar))
                .addGap(71, 71, 71))
        );

        jPanelCardLayout.add(jPanelRegsitroOrb, "cardRegistroOrb");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelCardLayout, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelCardLayout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jTextFieldNombresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNombresKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c != KeyEvent.VK_BACK_SPACE) && (c != ' ') && (c !='ñ')&& (c !='Ñ'))
        {   evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"Ingrese solo letras!!!");
        }

        if(jTextFieldNombres.getText().length() >= 30)
        {
            evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"El nombre del paciente debe ser maximo de 30 caracteres!!!");
        }

    }//GEN-LAST:event_jTextFieldNombresKeyTyped

    private void jTextFieldApellidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldApellidosKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c != KeyEvent.VK_BACK_SPACE) && (c != ' ') && (c !='ñ')&& (c !='Ñ'))
        {   evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"Ingrese solo letras!!!");
        }

        if(jTextFieldApellidos.getText().length() >= 30)
        {
            evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"El apellido del paciente debe ser maximo de 30 caracteres!!!");
        }
    }//GEN-LAST:event_jTextFieldApellidosKeyTyped

    private void jTextFieldDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDireccionKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') && (c != KeyEvent.VK_BACK_SPACE) && (c != ' ') && (c !='ñ')&& (c !='Ñ') && (c !='#') && (c !='-') && (c !='.') && (c !='/' ))
        {   evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"Caracter incorrecto para la direccion!!!");
        }

        if(jTextFieldDireccion.getText().length() >= 30)
        {
            evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"La direccion del paciente debe ser maximo de 30 caracteres!!!");
        }
    }//GEN-LAST:event_jTextFieldDireccionKeyTyped

    private void jTextFieldIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldIdKeyTyped
        // TODO add your handling code here:
        int longitudCadena = 0;
        char c = evt.getKeyChar();
        if((c < '0' || c > '9') && (c!= KeyEvent.VK_BACK_SPACE))
        {   evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"Ingrese solo numeros!!!");
        }

        longitudCadena = jTextFieldId.getText().length();
        if(longitudCadena >= 5)
        {
            evt.consume();
            getToolkit().beep();
            JOptionPane.showMessageDialog(null,"El id del paciente debe estar entre 0 y 99999!!!");
        }

    }//GEN-LAST:event_jTextFieldIdKeyTyped

    private void jButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnviarActionPerformed
        // TODO add your handling code here:
        Thread enviarIndicadores = new Thread(this);
        stop = false;
        enviarIndicadores.start();
    }//GEN-LAST:event_jButtonEnviarActionPerformed

    private void jButtonDetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetenerActionPerformed
        // TODO add your handling code here:
        stop = true;
        
    }//GEN-LAST:event_jButtonDetenerActionPerformed

    private void jButtonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarActionPerformed
        // TODO add your handling code here:
                // se crea e inicia el ORB
        String[] vec = new String [4];
        vec[0] = "-ORBInitialPort";
        vec[1] = jTextFieldIp.getText();
        vec[2] = "-ORBInitialPort";
        vec[3] = jTextFieldPuerto.getText();
        
        registrarOrb(vec);
        if (estaRegistradoNS)        
            cardLayout.show(jPanelCardLayout, "cardRegistrar");
        else
            JOptionPane.showMessageDialog(null, "No se pudo registrar en el orbd");
    }//GEN-LAST:event_jButtonRegistrarActionPerformed

    private void jButtonRegistrarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarPacienteActionPerformed
        // TODO add your handling code here:
        String tipo_id="";

        if((!jRadioButtonCC.isSelected() && !jRadioButtonTI.isSelected() && !jRadioButtonPP.isSelected()) ||
            jTextFieldId.getText().isEmpty() || jTextFieldNombres.getText().isEmpty() ||
            jTextFieldApellidos.getText().isEmpty() || jTextFieldDireccion.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Datos requeridos no deben estar vacios!!!");
        }else
        {
            if(jRadioButtonCC.isSelected())
            tipo_id = "CC";
            if(jRadioButtonTI.isSelected())
            tipo_id = "TI";
            if(jRadioButtonPP.isSelected())
            tipo_id = "PP";

            try
            {
                POA rootPOA = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
                rootPOA.the_POAManager().activate();
                // instancia el servant
                ClsAsintomaticoCllbckImpl objAsintomaticoCllbck = new ClsAsintomaticoCllbckImpl(this);
                // obtiene la referencia del rootpoa & activate el POAManager
                //*** crea un tie, con el servant como delegado***
                AsintomaticoCllbckIntPOATie gptie= new AsintomaticoCllbckIntPOATie(objAsintomaticoCllbck);

                //*** Obtener la referencia para el tie
                AsintomaticoCllbckInt reftie=gptie._this(orb);

                ClsAsintomaticoDTO asintomaticoCllbck = new ClsAsintomaticoDTO(jTextFieldNombres.getText(),jTextFieldApellidos.getText(),tipo_id, Integer.parseInt(jTextFieldId.getText()), jTextFieldDireccion.getText(),reftie);

                if(ref.registrarAsintomatico(asintomaticoCllbck) ){
                    JOptionPane.showMessageDialog(null, "Se registro paciente exitosamente!!!");
                    //limpiarPanelRegistrar();
                    //jButtonConsultar.setEnabled(true);
                    //jButtonEnviarIndicadores.setEnabled(true);
                }else
                JOptionPane.showMessageDialog(null, "No se registro el paciente!!!");

            }catch (HeadlessException | NumberFormatException | InvalidName | AdapterInactive e) {
                System.out.println("ERROR : " + e) ;
                e.printStackTrace(System.out);
            }
        }
    }//GEN-LAST:event_jButtonRegistrarPacienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUICliente2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUICliente2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUICliente2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUICliente2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       
        //</editor-fold>
        String vec[];
        if(args.length == 4)
            registrarOrb(args);
        else
            if(args.length == 2){
                vec = new String[4];               
                vec[0] = "-ORBInitialHost";
                vec[1] = args[0];
                vec[2] = "-ORBInitialPort";
                vec[3] = args[1];  
                registrarOrb(vec);
            }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUICliente2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDetener;
    private javax.swing.JButton jButtonEnviar;
    private javax.swing.JButton jButtonRegistrar;
    private javax.swing.JButton jButtonRegistrarPaciente;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JButton jButtonSalirRegsitrar;
    private javax.swing.JLabel jLabelApellido;
    private javax.swing.JLabel jLabelDireccion;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelIp;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelPuerto;
    private javax.swing.JLabel jLabelTipoId;
    private javax.swing.JPanel jPanelCardLayout;
    private javax.swing.JPanel jPanelIndicadores;
    private javax.swing.JPanel jPanelRegistrar;
    private javax.swing.JPanel jPanelRegsitroOrb;
    private javax.swing.JRadioButton jRadioButtonCC;
    private javax.swing.JRadioButton jRadioButtonPP;
    private javax.swing.JRadioButton jRadioButtonTI;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextFieldApellidos;
    private javax.swing.JTextField jTextFieldDireccion;
    private javax.swing.JTextField jTextFieldId;
    private javax.swing.JTextField jTextFieldIp;
    private javax.swing.JTextField jTextFieldNombres;
    private javax.swing.JTextField jTextFieldPuerto;
    private javax.swing.JTextPane jTextPaneArea;
    // End of variables declaration//GEN-END:variables
 
    
    @Override
    public void run() {
        
        
                
        while (!stop) {
            //hacemos un ciclo infinito
            try {
                float ToC = (float) (Math.random() * 7 + 35);
                int fCardiaca = (int) (Math.random() * 31 + 55);
                int fRespiratoria = (int) (Math.random() * 31 + 65);
                appendToPane(jTextPaneArea, "\nEnviando indicadores...\n", Color.blue);
                appendToPane(jTextPaneArea, "Paciente: "+paciente.nombres+" "+paciente.apellidos+"\n", Color.blue);
                appendToPane(jTextPaneArea, paciente.tipo_id+": "+paciente.id+"\n", Color.blue);
                appendToPane(jTextPaneArea, "Frecuencia cardiaca: " + fCardiaca+"\n", Color.black);
                appendToPane(jTextPaneArea, "Frecuencia respiratoria: " + fRespiratoria+"\n", Color.black);
                appendToPane(jTextPaneArea, "Temperatura: " + ToC + " C.\n", Color.black);
                ref.enviarIndicadores(paciente.id, fCardiaca, fRespiratoria, ToC);


                Thread.sleep(8000);

            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        appendToPane(jTextPaneArea, "Ha finalizado el proceso enviar indicadores para el paciente "+paciente.tipo_id+": "+paciente.id+" "+paciente.nombres+" "+paciente.apellidos+"\n", Color.GREEN);

    }
    
    
    //metodo para adicionar texto con color a un jTextPaneArea
    private void appendToPane(JTextPane tp, String msg, Color c)
    {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
        

    }
    
    private static void registrarOrb(String[] vec){

        try {
            ORB orb = ORB.init(vec, null);

            // se obtiene la referencia al name service
            org.omg.CORBA.Object objRef;
            objRef = orb.resolve_initial_references("NameService");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

            // *** Resuelve la referencia del objeto en el N_S ***
            String name = "objAsintomatico";
            ref = GestionAsintomaticosIntHelper.narrow(ncRef.resolve_str(name));
            estaRegistradoNS = true;
            System.out.println("Obtenido el manejador sobre el servidor de objetos: " + ref);
        } catch (InvalidName ex) {
            Logger.getLogger(GUICliente2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotFound ex) {
            Logger.getLogger(GUICliente2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CannotProceed ex) {
            Logger.getLogger(GUICliente2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (org.omg.CosNaming.NamingContextPackage.InvalidName ex) {
            Logger.getLogger(GUICliente2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
